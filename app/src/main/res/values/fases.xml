<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="tf1">
        <item>Es un paradigma de programación que usa objetos y sus interacciones, para diseñar aplicaciones y programas informáticos. Está basado en varias técnicas, incluyendo herencia, abstracción, polimorfismo y encapsulamiento.</item>
        <item>Denota las características esenciales de un objeto permite seleccionar las características relevantes dentro de un conjunto e identificar comportamientos comunes para definir nuevos tipos de entidades en el mundo real, es clave en el proceso de análisis y diseño orientado a objetos, ya que mediante ella podemos llegar a armar un conjunto de clases que permitan modelar la realidad o el problema que se quiere atacar.	</item>
        <item>Entidad provista de un conjunto de propiedades o atributos (datos) y de comportamiento o funcionalidad (métodos) los mismos que consecuentemente reaccionan a eventos. Se corresponde con los objetos reales del mundo que nos rodea, o a objetos internos del sistema (del programa).</item>
        <item>Una clase es la descripción de un conjunto de objetos similares; consta de métodos y de datos que resumen las características comunes de dicho conjunto, se pueden definir muchos objetos de la misma clase de la misma forma que, en la vida real, haríamos galletas (objeto) con el mismo molde (clase) solo que, cada galleta tendría igual forma, pero es posible que tenga distinto sabor, textura, olor, color, etc.</item>
    </string-array>
    <string-array name="tf2">
        <item>El constructor es un método especial de una clase. El objetivo fundamental del constructor es inicializar los atributos del objeto que creamos. Características:
Un constructor tiene el mismo nombre de la clase que pertenece.
            El constructor es el primer método que se ejecuta cuando se crea un objeto.
El constructor se llama automáticamente cuando instanciamos el objeto.
 Luego de que se ejecuta el constructor no puede ser llamado nuevamente.
 Un constructor no puede retornar dato.
 Un constructor puede recibir parámetros que se utilizan normalmente para inicializar atributos. El constructor es un método opcional, no es obligación colocarlo y depende del diseño de la clase y la tarea que se quiera realizar.
</item>
        <item>Los destructores se utilizan para destruir instancias de clases. El destructor limpia cualquiera de los recursos no administrados creados por la aplicación. Solo puede haber un destructor para una clase.</item>
        <item>El método get (obtener) es un método que se utiliza para obtener valores de los atributos de la clase con el modificador de acceso privado</item>
        <item> El Método set (establecer, colocar) es un método que se utiliza para asignarle valores a los atributos de la clase con el modificador de acceso privado.</item>
    </string-array>
    <string-array name="tf3">
    </string-array>
    <string-array name="tf4">
    </string-array>


    <string-array name="ef1java">

    </string-array>
</resources>